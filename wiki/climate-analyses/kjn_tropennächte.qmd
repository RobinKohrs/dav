---
# -------------------------------------
# REQUIRED & COMMON FIELDS
# -------------------------------------
title: "Temperaturen in der Nacht"
author: "Robin Kohrs / Netzwerk Klimajournalismus"
date: "2025-04-27" # Use specific date, or "today" to auto-update on render
date-format: "DD MMMM YYYY" # Optional: How the date is displayed (e.g., 17 October 2023)

# -------------------------------------
# OPTIONAL DESCRIPTIVE FIELDS
# -------------------------------------
# subtitle: "SUBTITLE:..." # Optional additional detail
# abstract: | # Optional multi-line summary of the analysis goals/findings
  # Abstract

# -------------------------------------
# CUSTOM FIELDS (Examples - Adapt as needed)
# -------------------------------------
# You can define any key-value pairs here. They can sometimes be accessed
# within your document or code (e.g., via quarto::quarto_metadata()).
analysis:
  id: "NKA-YYYY-NN" # Example: Internal analysis ID
  version: "1.0" # Version of this specific analysis document
  status: "Draft" # E.g., Draft, In Review, Final
  lead: "Person Responsible"
data:
  source: "[Name of Data Provider/URL]"
  accessed: "YYYY-MM-DD" # Date data was downloaded/accessed
  processing_script: "[Path to script, if any]" # Reference R script used

# -------------------------------------
# EXECUTION OPTIONS (Control R/Python code execution)
# -------------------------------------
execute:
  echo: false # Set to 'true' to show code chunks by default
  warning: false # Set to 'true' to show warnings
  message: false # Set to 'true' to show messages
  # cache: true # Uncomment to cache results of computations (speeds up re-rendering)
  # error: true # Set to 'false' to stop rendering on code errors

---




```{r setup, include=FALSE}
# Essential setup chunk - load packages, etc.
knitr::opts_chunk$set(echo = TRUE, # Override global echo=false for this chunk if needed
                      warning = FALSE,
                      message = FALSE)

library(devtools)

# Load other libraries
library(tidyverse)
library(glue)
library(DT)
library(davR)
library(here)
library(ggtext)

data_raw_path_hourly_data = davR::sys_make_path(
  file.path(
    here(),
    "wiki",
    "data_raw",
    "kjn",
    "2025-05-tropennächte",
    "hourly_data"
  )
)

```


## Durschnittstemperatur in der Nacht im Juli


```{r download_data}
#| echo: false
resource_id = "klima-v2-1h"
start_year = 1900
end_year = 2025
month = 7

ex = geosphere_explore_resource("klima-v2-1h")

data_list = map(start_year:end_year, function(year){
  start = glue("{year}-{month}-01")
  last_day_in_month = lubridate::days_in_month(glue("{year}-{month}-01"))
  end = glue("{year}-{month}-{last_day_in_month}")

  fn = glue("{year}_{month}.csv")
  op = sys_make_path(file.path(data_raw_path_hourly_data, fn))
  if (file.exists(op)) {
    result = data.table::fread(op)
  } else{
    result = tryCatch({
      data = geosphere_get_data(
        resource_id = resource_id,
        parameters = c("tl"),
        start = start,
        end = end,
        station_ids = 105,
        type = "station",
        mode = "historical",
        output_file = op
      ) %>% data.table::fread()
    }, error = function(e) {
      cli::cli_warn("Failed processing {year}-{month}: {conditionMessage(e)}")
      return(NULL) # Return NULL on error
    })
  }
  
  return(result)
})

data_hourly = keep(data_list, ~!is.null(.x)) %>% bind_rows()

# find the temperature at night
data_hourly %>%
  # 1. Filter for the month of July
  filter(month(time) == 7) %>%
  
  # 2. Filter for night hours (22:00 to 06:59)
  # Hour 22, 23, 0, 1, 2, 3, 4, 5, 6
  filter(hour(time) >= 18 | hour(time) <= 6) %>%
  
  # 3. Group by the desired variables: year, station, substation
  group_by(year = year(time)) %>%
  # 4. Calculate the mean temperature, removing NA values
  summarise(mean_night_temp_july = mean(tl, na.rm = TRUE)) %>% 
  mutate(smoothed_5yr_mean = zoo::rollmean(
    x = mean_night_temp_july,
    # The column to smooth
    k = 5,
    # The window size (5 years)
    fill = NA,
    # Put NA where the window is incomplete (start of series)
    align = "right"           # Align window to the right (uses current year and previous 4)
  )) -> data_per_year


#Define the colors here to use them consistently
color_yearly <- "tomato"
color_smoothed <- "#343434" # A dark grey

smoothed_means_long <- data_per_year %>%
  pivot_longer(
    cols = c(mean_night_temp_july, smoothed_5yr_mean), # Columns to lengthen
    names_to = "average_type",                         # New column for names of original cols
    values_to = "temperature"                          # New column for the values
  ) %>%
  # *** Use German labels for the factor levels ***
  mutate(average_type = factor(average_type,
                               levels = c("mean_night_temp_july", "smoothed_5yr_mean"),
                               labels = c("Jährlich", "5-Jahres Glättung"))) # German labels

# --- Step 2: Find the first year where smoothed data exists ---
min_start_year <- smoothed_means_long %>%
  filter(average_type == "5-Jahres Glättung" & !is.na(temperature)) %>%
  pull(year) %>%
  min()

if (!is.finite(min_start_year)) {
  warning("Could not find a starting year with non-NA smoothed data. Using overall minimum year.")
  min_start_year <- min(smoothed_means_long$year, na.rm = TRUE)
}


# --- Step 3: Create the ggplot with German labels and ggtext title ---

ggplot(smoothed_means_long, aes(x = year, y = temperature, color = average_type)) +

  # Draw POINTS only for "Jährlich" (Yearly)
  geom_point(data = . %>% filter(average_type == "Jährlich"),
             size = 2,
             alpha = 0.7) +

  # Draw a LINE only for "5-Jahres Glättung" (Smoothed)
  geom_line(data = . %>% filter(average_type == "5-Jahres Glättung"),
            linewidth = 1.2) +

  # Add Horizontal Line and GERMAN Label for "Tropennacht"
  geom_hline(yintercept = 20, linetype = "dashed", color = "darkgrey", linewidth=0.8) +
  annotate(geom = "text",
           x = Inf,
           y = 20.1,
           # *** German label ***
           label = "Tropennacht (>= 20°C)",
           hjust = 1.05,
           vjust = 0,
           color = "darkgrey",
           size = 3.5) +


  # *** Use scale_color_manual to assign specific colors ***
  scale_color_manual(
     # *** Legend title in German ***
     name = "Mittelwerttyp",
     # *** Values map German factor levels to desired colors ***
     values = c("Jährlich" = color_yearly,
                "5-Jahres Glättung" = color_smoothed)
  ) +

  # Adjust X-axis limits using coord_cartesian
  coord_cartesian(xlim = c(min_start_year - 0.5, NA),
                  # Optional: Ensure y-axis includes the annotation comfortably
                  ylim = c(NA, NA), # Let ggplot decide y limits mostly
                  clip = "off") +   # Allow annotation to potentially go outside plot panel slightly if needed

  # Add labels (in German) and the ggtext title
  labs(
    # *** Use ggtext markdown/HTML for the title ***
    title = paste0(
      "Juli Nachttemperatur: <span style='color:", color_yearly,
      ";'>Jährlich</span> vs <span style='color:", color_smoothed,
      ";'>5-Jahres Glättung</span>"
      ),
    # *** German subtitle ***
    subtitle = "Nacht definiert als 18:00 - 05:59 | Station Wien Hohe Warte",
    # *** German axis labels ***
    x = "Jahr",
    y = "Mittlere Temperatur (°C)"
  ) +

  # Apply a theme and enable ggtext rendering for the title
  theme_minimal() +
  theme(
    legend.position = "bottom",
    # *** Use element_markdown for plot title to render HTML/markdown ***
    plot.title = element_markdown(hjust = 0.5, size = 14), # size optional
    plot.subtitle = element_text(hjust = 0.5),
    strip.background = element_rect(fill = "grey90", color = NA),
    strip.text = element_text(face = "bold"),
    # Optional: Add margin above plot title for annotation space if needed
    plot.margin = margin(t = 15, r = 5.5, b = 5.5, l = 5.5, unit = "pt")
  )

file_dir = ifelse(
  rstudioapi::isAvailable(), 
  rstudioapi::getActiveDocumentContext()$path,
  knitr::current_input(dir = TRUE)
) |> dirname()

op = sys_make_path(file.path(file_dir, "images", "jährliche_nachttemperatur.png"))
print(op)
ggsave(op)
```





