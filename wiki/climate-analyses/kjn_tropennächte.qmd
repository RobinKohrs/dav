---
# -------------------------------------
# REQUIRED & COMMON FIELDS
# -------------------------------------
title: "Temperaturen in der Nacht"
author: "Robin Kohrs / Netzwerk Klimajournalismus"
date: "2025-04-27" # Use specific date, or "today" to auto-update on render
date-format: "DD MMMM YYYY" # Optional: How the date is displayed (e.g., 17 October 2023)

# -------------------------------------
# OPTIONAL DESCRIPTIVE FIELDS
# -------------------------------------
# subtitle: "SUBTITLE:..." # Optional additional detail
# abstract: | # Optional multi-line summary of the analysis goals/findings
  # Abstract

# -------------------------------------
# CUSTOM FIELDS (Examples - Adapt as needed)
# -------------------------------------
# You can define any key-value pairs here. They can sometimes be accessed
# within your document or code (e.g., via quarto::quarto_metadata()).
analysis:
  id: "NKA-YYYY-NN" # Example: Internal analysis ID
  version: "1.0" # Version of this specific analysis document
  status: "Draft" # E.g., Draft, In Review, Final
  lead: "Person Responsible"
data:
  source: "[Name of Data Provider/URL]"
  accessed: "YYYY-MM-DD" # Date data was downloaded/accessed
  processing_script: "[Path to script, if any]" # Reference R script used

# -------------------------------------
# EXECUTION OPTIONS (Control R/Python code execution)
# -------------------------------------
execute:
  echo: false # Set to 'true' to show code chunks by default
  warning: false # Set to 'true' to show warnings
  message: false # Set to 'true' to show messages
  # cache: true # Uncomment to cache results of computations (speeds up re-rendering)
  # error: true # Set to 'false' to stop rendering on code errors

---




```{r setup, include=FALSE}
# Essential setup chunk - load packages, etc.
knitr::opts_chunk$set(echo = TRUE, # Override global echo=false for this chunk if needed
                      warning = FALSE,
                      message = FALSE)

library(devtools)

# Load other libraries
library(tidyverse)
library(glue)
library(DT)
library(davR)
library(here)

data_raw_path_hourly_data = davR::sys_make_path(
  file.path(
    here(),
    "wiki",
    "data_raw",
    "kjn",
    "2025-05-tropennÃ¤chte",
    "hourly_data"
  )
)

```


## Durschnittstemperatur in der Nacht im Juli


```{r}
resource_id = "klima-v2-1h"
start_year = 1900
end_year = 2025
month = 7

ex = geosphere_explore_resource("klima-v2-1h")

data_list = map(start_year:end_year, function(year){
  start = glue("{year}-{month}-01")
  last_day_in_month = lubridate::days_in_month(glue("{year}-{month}-01"))
  end = glue("{year}-{month}-{last_day_in_month}")

    fn = glue("{year}_{month}.csv")
    op = sys_make_path(file.path(data_raw_path_hourly_data, fn))
    print(op)
    if(file.exists(op)) return(NULL)
    result = tryCatch({
      data = geosphere_get_data(
        resource_id = resource_id,
        parameters = c("tl"),
        start = start,
        end = end,
        station_ids = 105,
        type = "station",
        mode = "historical",
        output_file = op
      ) %>% data.table::fread()
    }, error = function(e) {
      cli::cli_warn("Failed processing {year}-{month}: {conditionMessage(e)}")
      return(NULL) # Return NULL on error
    })

    return(result)
})

data_hourly = keep(data_list, ~!is.null(.x)) %>% bind_rows()
```





