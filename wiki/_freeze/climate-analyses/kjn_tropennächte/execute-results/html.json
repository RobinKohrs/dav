{
  "hash": "f88a7166c17c18ecfa29f62919659f32",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Temperaturen in der Nacht\"\nauthor: \"Robin Kohrs / Netzwerk Klimajournalismus\"\ndate: \"2025-04-27\" # Use specific date, or \"today\" to auto-update on render\ndate-format: \"DD MMMM YYYY\" # Optional: How the date is displayed (e.g., 17 October 2023)\n\n# -------------------------------------\n# EXECUTION OPTIONS (Control R/Python code execution)\n# -------------------------------------\nexecute:\n  echo: false # Set to 'true' to show code chunks by default\n  warning: false # Set to 'true' to show warnings\n  message: false # Set to 'true' to show messages\n\n  # cache: true # Uncomment to cache results of computations (speeds up re-rendering)\n  # error: true # Set to 'false' to stop rendering on code errors\n---\n\n\n\n\n\n\n\n## Durschnittstemperatur in der Nacht im Juli\n\n\n### In Wien\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 3\n  name      long_name                                      unit \n  <chr>     <chr>                                          <chr>\n1 cglo      Globalstrahlung Mittelwert                     W/m² \n2 cglo_flag Qualitätsflag für Globalstrahlung Mittelwert   code \n3 dd        Windrichtung 360° Mittelwert                   °    \n4 dd_flag   Qualitätsflag für Windrichtung 360° Mittelwert code \n5 ddx       Windrichtung zur Spitzenböe                    °    \n6 ddx_flag  Qualitätsflag für Windrichtung zur Spitzenböe  code \n# ℹ 32 more rows\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 3\n  name      long_name                                      unit \n  <chr>     <chr>                                          <chr>\n1 cglo      Globalstrahlung Mittelwert                     W/m² \n2 cglo_flag Qualitätsflag für Globalstrahlung Mittelwert   code \n3 dd        Windrichtung 360° Mittelwert                   °    \n4 dd_flag   Qualitätsflag für Windrichtung 360° Mittelwert code \n5 ddx       Windrichtung zur Spitzenböe                    °    \n6 ddx_flag  Qualitätsflag für Windrichtung zur Spitzenböe  code \n# ℹ 32 more rows\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](kjn_tropennächte_files/figure-html/download_data-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/rk/projects/personal/dav/wiki/climate-analyses/images/jährliche_nachttemperatur.png\"\n```\n\n\n:::\n:::\n\n### Für alle Stationen in den Hauptstädten\n\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nresource_id = \"klima-v2-1h\"\nend_year = 2025\nmonth = 7\n\n# download data\nwalk(min_start_year:2025, function(year){\n  start = glue(\"{year}-{month}-01\")\n  last_day_in_month = lubridate::days_in_month(glue(\"{year}-{month}-01\"))\n  end = glue(\"{year}-{month}-{last_day_in_month}\")\n\n  fn = glue(\"capitals_{year}_{month}.csv\")\n  op = sys_make_path(file.path(data_raw_path_hourly_data, fn))\n  if (file.exists(op)) {\n    result = data.table::fread(op)\n  } else{\n    result = tryCatch({\n      data = geosphere_get_data(\n        resource_id = resource_id,\n        parameters = c(\"tl\"),\n        start = start,\n        end = end,\n        station_ids = davR::geosphere_stations_in_capitals$id,\n        type = \"station\",\n        mode = \"historical\",\n        output_file = op) %>% data.table::fread()\n    }, error = function(e) {\n      cli::cli_warn(\"Failed processing {year}-{month}: {conditionMessage(e)}\")\n      return(NULL) # Return NULL on error\n    })\n  }\n})\n\n# read in all data\npaths = paths = dir(data_raw_path_hourly_data, \"^capitals\", full.names = T)\ndata_per_year = map(paths, data.table::fread) \ndata_all_years = data_per_year %>% map(function(dpy) {\n  year = dpy$time[[1]] %>% lubridate::year()\n  dpy %>%\n    group_by(station) %>%\n    filter(hour(time) >= 22 | hour(time) <= 6) %>%\n    summarise(mean_night_temp_july = mean(tl, na.rm = TRUE)) %>%\n    mutate(year = year) -> data_one_year_summarised\n  \n})\n\n\n# put all stations together\nbind_rows(data_all_years) %>% \n  group_by(station) %>% \n  arrange(year, .by_group = T) %>% \n  mutate(smoothed_5yr_mean = zoo::rollmean(\n    x = mean_night_temp_july,\n    k = 5,\n    fill = NA,\n    align = \"right\"           # Align window to the right (uses current year and previous 4)\n  )) -> data_per_year\n\n\ndata_per_year = data_per_year %>%\n  left_join(davR::geosphere_stations_in_capitals %>% select(id, name) %>% st_drop_geometry(), join_by(station == id)) %>% \n  ungroup() %>% \n  select(-station)\n  \n  \n\n\n\ncolor_yearly <- \"tomato\"\ncolor_smoothed <- \"#343434\" # A dark grey\n\nsmoothed_means_long <- data_per_year %>%\n  pivot_longer(\n    cols = c(mean_night_temp_july, smoothed_5yr_mean), # Columns to lengthen\n    names_to = \"average_type\",                         # New column for names of original cols\n    values_to = \"temperature\"                          # New column for the values\n  ) %>%\n  # *** Use German labels for the factor levels ***\n  mutate(average_type = factor(average_type,\n                               levels = c(\"mean_night_temp_july\", \"smoothed_5yr_mean\"),\n                               labels = c(\"Jährlich\", \"5-Jahres Glättung\"))) # German labels\n\n# --- Step 2: Find the first year where smoothed data exists ---\nmin_start_year <- smoothed_means_long %>%\n  filter(average_type == \"5-Jahres Glättung\" & !is.na(temperature)) %>%\n  pull(year) %>%\n  min()\n\nif (!is.finite(min_start_year)) {\n  warning(\"Could not find a starting year with non-NA smoothed data. Using overall minimum year.\")\n  min_start_year <- min(smoothed_means_long$year, na.rm = TRUE)\n}\n\nggplot(smoothed_means_long, aes(x = year, y = temperature)) +\n  # Draw POINTS only for \"Jährlich\" (Yearly)\n  geom_point(data = . %>% filter(average_type == \"Jährlich\"),\n             size = 1,\n             alpha = 0.7,\n             aes(color = average_type),\n            key_glyph=\"point\" \n             ) +\n\n  # Draw a LINE only for \"5-Jahres Glättung\" (Smoothed)\n  # geom_line(data = . %>% filter(average_type == \"5-Jahres Glättung\"),\n  #           linewidth = 0.8) +\n  geom_smooth(\n    data = . %>% filter(average_type == \"Jährlich\"),\n    method = \"loess\",\n    linewidth = 0.5,\n    colour = \"black\",\n    show.legend = T,\n    aes(linetype = \"Loess Glättung\"),\n    key_glyph = \"timeseries\"\n  ) +\n  # Define linetype for the \"Loess Glättung\"\n  scale_linetype_manual(\n    name = NULL,\n    values = c(\"Loess Glättung\" = \"solid\"),\n    labels = c(\"Loess Glättung\" = \"Loess Glättung\", \"b\")\n  ) +\n  \n  # Add Horizontal Line and GERMAN Label for \"Tropennacht\"\n  geom_hline(yintercept = 20, linetype = \"dashed\", color = \"darkgrey\", linewidth=0.5) +\n  annotate(geom = \"text\",\n           x = 1950,\n           y = 20.1,\n           label = \"Tropennacht (>= 20°C)\",\n           hjust = 0,\n           vjust = -1,\n           color = \"#353535\",\n           size = 1.5) +\n\n\n  scale_color_manual(\n     name = NULL,\n     values = c(\"Jährlich\" = color_yearly),\n     guide = guide_legend(override.aes = list(shape = 16, linetype = 0)) \n  ) +\n\n  coord_cartesian(xlim = c(min_start_year - 0.5, NA),\n                  # Optional: Ensure y-axis includes the annotation comfortably\n                  ylim = c(NA, NA), # Let ggplot decide y limits mostly\n                  clip = \"off\") +   # Allow annotation to potentially go outside plot panel slightly if needed\n\n  labs(\n    title = paste0(\n      \"Juli Nachttemperatur: <span style='color:\", color_yearly,\n      \";'>Jährlich</span> vs <span style='color:\", color_smoothed,\n      \";'>5-Jahres Glättung</span>\"\n      ),\n    subtitle = \"Nacht definiert als 18:00 - 05:59 | Station Wien Hohe Warte\",\n    x = \"Jahr\",\n    y = \"Mittlere Temperatur (°C)\"\n  ) +\n  facet_wrap(~name) + \n  theme_minimal(base_size = 7) +\n  theme(\n    legend.position = \"bottom\",\n    # *** Use element_markdown for plot title to render HTML/markdown ***\n    plot.title = element_markdown(hjust = 0.5, size = 14), # size optional\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.background = element_rect(fill = \"transparent\", color = NA),\n    strip.text = element_text(face = \"bold\"),\n    panel.grid = element_line(color=\"#35353599\",linewidth = 0.05),\n    panel.border = element_rect(fill = \"transparent\",colour = \"#353535\"),\n    # Optional: Add margin above plot title for annotation space if needed\n    plot.margin = margin(t = 15, r = 5.5, b = 5.5, l = 5.5, unit = \"pt\"),\n    plot.background = element_rect(fill=\"#ffffff\", colour = \"transparent\")\n  )\n```\n\n::: {.cell-output-display}\n![](kjn_tropennächte_files/figure-html/all_stations-1.png){width=2100}\n:::\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}