% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acled_download_events.R
\name{acled_download_events}
\alias{acled_download_events}
\title{Download ACLED Data Interactively or Programmatically (Manual URL Construction)}
\usage{
acled_download_events(
  email_address = NULL,
  access_key = NULL,
  start_date,
  end_date,
  country = NULL,
  region = NULL,
  admin1 = NULL,
  admin2 = NULL,
  admin3 = NULL,
  event_types = NULL,
  sub_event_types = NULL,
  interactive_events = FALSE,
  page_limit = 5000,
  max_pages = 100,
  output_format = "df",
  ...
)
}
\arguments{
\item{email_address}{Your registered ACLED API email address.
If \code{NULL} or missing, uses \code{ACLED_EMAIL} env var.}

\item{access_key}{Your ACLED API access key.
If \code{NULL} or missing, uses \code{ACLED_API_KEY} env var.}

\item{start_date}{Character string or Date object. Start date (YYYY-MM-DD). Required.}

\item{end_date}{Character string or Date object. End date (YYYY-MM-DD). Required.}

\item{country}{Character vector. Optional. ACLED country name(s).
Example: \code{c("Yemen", "Syria")}.}

\item{region}{Character or numeric vector. Optional. ACLED region name(s) or code(s).
See ACLED API documentation or \code{acled.api::get.api.regions()}.}

\item{admin1}{Character vector. Optional. First-level administrative region(s).}

\item{admin2}{Character vector. Optional. Second-level administrative region(s).}

\item{admin3}{Character vector. Optional. Third-level administrative region(s).}

\item{event_types}{Character vector. Optional. ACLED event type(s).
If \code{NULL} and \code{interactive_events = FALSE}, all event types considered.
If \code{interactive_events = TRUE}, this argument is ignored initially.
Example: \code{c("Battles", "Explosions/Remote violence")}.}

\item{sub_event_types}{Character vector. Optional. ACLED sub-event type(s).
If \code{NULL}, all sub-types for selected \code{event_types} considered.
If \code{interactive_events = TRUE}, this argument is ignored initially.
Example: \code{c("Air/drone strike", "Armed clash")}.}

\item{interactive_events}{Logical. If \code{TRUE}, prompts user to select event types
and sub-event types. Defaults to \code{FALSE}.}

\item{page_limit}{Numeric. Records per API page request. Max 5000.}

\item{max_pages}{Numeric. Maximum pages to fetch to prevent overly long requests.}

\item{output_format}{Character. "df" for a data.frame or "raw_json" for raw list.}

\item{...}{Additional query parameters to pass directly to the ACLED API
as a named list (e.g., \code{list(terms_of_use="yes", source="Reuters")}).
These will be added to the manually constructed URL string.
See ACLED API guide for available parameters.}
}
\value{
A data.frame containing the queried ACLED event data (if \code{output_format = "df"}),
or a list of parsed JSON content from each page (if \code{output_format = "raw_json"}).
Returns NULL if a critical error occurs or no data is found.
}
\description{
This function calls the official ACLED API directly to download
data for user-specified event types, sub-event types, and geographic areas.
It uses manual construction of the URL query string.
It can operate interactively for selecting event types and sub-event types.
It handles API pagination to retrieve all relevant data.
}
\details{
Authentication credentials (email and access key) can be provided as arguments
or retrieved from environment variables \code{ACLED_EMAIL} and \code{ACLED_API_KEY}.
}
\examples{
\dontrun{
# --- Set environment variables first (recommended) ---
# Sys.setenv(ACLED_EMAIL = "YOUR_EMAIL")
# Sys.setenv(ACLED_API_KEY = "YOUR_ACCESS_KEY")

# Example 1: Explosions in Yemen for a specific period
yemen_explosions = acled_download_events(
  start_date = "2023-01-01",
  end_date = "2023-01-31",
  country = "Yemen",
  event_types = "Explosions/Remote violence"
)
if (!is.null(yemen_explosions) && nrow(yemen_explosions) > 0) {
  print(head(yemen_explosions[, c("event_date", "country", "admin1", "event_type")]))
}

# Example 2: Interactive selection (run in an interactive R session)
# interactive_data = acled_download_events(
#   start_date = "2024-01-01",
#   end_date = "2024-01-07",
#   country = "Ukraine",
#   interactive_events = TRUE
# )
# if (!is.null(interactive_data)) print(head(interactive_data))
}
}
