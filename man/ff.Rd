% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ff.R
\name{ff}
\alias{ff}
\title{Create a Customized Data Frame Search Function}
\usage{
ff(df, default_cols = NULL)
}
\arguments{
\item{df}{A data.frame or an sf object to be searched.}

\item{default_cols}{An optional character vector of column names to be used as
the default set for searching by the returned function. If \code{NULL} (the default),
and no columns are specified in a call to the returned search function,
all character and factor columns of \code{df} will be searched. For \code{sf} objects,
the geometry column is automatically excluded from this default.
If specified columns are not character or factor, they will be coerced to
character for searching, with a warning when the search function is used.}
}
\value{
A new function with the following signature:
\verb{function(pattern, fuzzy = FALSE, top_n = 3, fuzzy_method = "osa", cols = NULL)}
\describe{
\item{\code{pattern}}{A character string (regex or plain text for fuzzy) to search for.}
\item{\code{fuzzy}}{Logical. If \code{TRUE}, performs fuzzy matching using the
\code{stringdist} package to find the \code{top_n} most similar rows.
Defaults to \code{FALSE} (regex search). The \code{stringdist} package must be
installed and will be imported by this package.}
\item{\code{top_n}}{Integer. If \code{fuzzy = TRUE}, the number of best matches to return.
Defaults to 3.}
\item{\code{fuzzy_method}}{Character. The method for \code{stringdist} calculation if \code{fuzzy = TRUE}.
Defaults to "osa" (Optimal String Alignment). See \code{?stringdist::stringdistmethods}
for other options.}
\item{\code{cols}}{An optional character vector of column names to search within
for \emph{this specific call}. If provided, this overrides any \code{default_cols}
set when \code{ff} was called. If \code{NULL} (the default), the search will use
the \code{default_cols} (if provided to \code{ff}) or all character/factor columns
if no \code{default_cols} were set.}
}
This returned function will take a \code{pattern} and search the data frame
originally passed to \code{ff}, returning the matching rows.
}
\description{
This function acts as a factory, returning another function that is tailored
to search within a specific data frame (or sf object). The returned search
function can perform case-insensitive regular expression searches or fuzzy
string matching.
}
\examples{
# Create a sample data frame
my_data = data.frame(
  ID = 1:5,
  Name = c("Apple Pie", "Banana Bread", "Cherry Cake", "Date Squares", "Elderflower Tea"),
  Category = factor(c("Dessert", "Baked Good", "Dessert", "Snack", "Beverage")),
  Description = c("Sweet apple filling", "Moist banana loaf",
                  "Rich cherry flavor", "Chewy dates", "Refreshing floral drink"),
  stringsAsFactors = FALSE
)

# 1. Searcher with no default columns (will search all char/factor cols by default)
search_all_defaults = ff(my_data)
search_all_defaults("apple") # Searches Name, Category, Description
search_all_defaults("apple", cols = "Name") # Overrides to search only Name
search_all_defaults("Dessert", cols = c("Name", "Category")) # Searches specified

# 2. Searcher with default columns specified
search_name_default = ff(my_data, default_cols = "Name")
search_name_default("apple") # Searches only Name (default)
search_name_default("Dessert") # Searches only Name (default), won't find
search_name_default("Dessert", cols = "Category") # Overrides to search Category
search_name_default("Bread", cols = c("Name", "Description")) # Override

# 3. Searcher with multiple default columns
search_name_cat_default = ff(my_data, default_cols = c("Name", "Category"))
search_name_cat_default("apple") # Searches Name and Category
search_name_cat_default("Baked") # Finds in Category
search_name_cat_default("filling", cols = "Description") # Overrides

# Fuzzy search with override
search_all_defaults("Banna Bred", fuzzy = TRUE, top_n = 1) # Uses default cols
search_all_defaults("Banna Bred", fuzzy = TRUE, top_n = 1, cols="Name") # Uses override

# Error if default_cols in ff don't exist
# try(ff(my_data, default_cols = "NonExistentCol"))

# Error if cols in searcher don't exist
# try(search_all_defaults("test", cols = "NonExistentCol"))
}
