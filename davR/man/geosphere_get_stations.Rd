% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geosphere_get_stations.R
\name{geosphere_get_stations}
\alias{geosphere_get_stations}
\title{Download Geosphere Austria Station Metadata}
\usage{
geosphere_get_stations(
  metadata_url =
    "https://dataset.api.hub.geosphere.at/v1/station/historical/klima-v2-1d/metadata",
  output_path = NULL,
  return_format = c("sf", "dataframe"),
  cache_format = c("rds", "csv"),
  crs = 4326,
  verbose = FALSE
)
}
\arguments{
\item{metadata_url}{The full URL to the metadata endpoint of a specific Geosphere
API dataset that contains station information (e.g., ".../metadata").
Defaults to the metadata URL for the "klima-v2-1d" dataset.}

\item{output_path}{Optional. A file path (e.g., "stations.rds" or "stations.csv")
where the downloaded and processed station data (as an \code{sf} object or data frame)
should be saved for caching. If the file exists, it will be loaded from the
cache instead of downloading. Using ".rds" is recommended for saving the \code{sf} object perfectly.}

\item{return_format}{Character. Either \code{"sf"} (default) to return an \code{sf} spatial
data frame or \code{"dataframe"} to return a regular data frame.}

\item{cache_format}{Character. Format to use for caching if \code{output_path} is
provided. Either \code{"rds"} (default, recommended for \code{sf} objects) or \code{"csv"}.
Ignored if \code{output_path} is \code{NULL}. Note that saving \code{sf} objects to CSV
loses spatial information unless WKT geometry is explicitly handled.}

\item{crs}{Coordinate reference system for the output \code{sf} object. Defaults to
\code{4326} (WGS 84), assuming the API provides standard longitude/latitude.}

\item{verbose}{Logical. If \code{TRUE}, print informative messages.}
}
\value{
An \code{sf} spatial data frame (if \code{return_format = "sf"}) or a regular
data frame (if \code{return_format = "dataframe"}) containing station metadata.
Returns \code{NULL} if downloading or processing fails and no cache exists.
}
\description{
Retrieves station metadata from the Geosphere Austria API, typically from
a dataset's metadata endpoint. Optionally caches the result to a local file.
}
\examples{
\dontrun{
# Ensure sf is installed: install.packages("sf")

# Example 1: Get stations as an sf object (default)
stations_sf <- geosphere_get_stations(verbose = TRUE)
if (!is.null(stations_sf)) {
  print(head(stations_sf))
  plot(st_geometry(stations_sf))
}

# Example 2: Get stations as a data frame and cache to RDS
stations_df <- geosphere_get_stations(
  return_format = "dataframe",
  output_path = "geosphere_stations_cache.rds",
  cache_format = "rds",
  verbose = TRUE
)
# Next time, it will load from "geosphere_stations_cache.rds" if it exists
stations_cached <- geosphere_get_stations(output_path = "geosphere_stations_cache.rds")

# Example 3: Use a different metadata URL (replace with a valid one)
# custom_url <- "https://dataset.api.hub.geosphere.at/v1/..."
# custom_stations <- geosphere_get_stations(metadata_url = custom_url)

}
}
