% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geosphere_explore_resource.R
\name{geosphere_explore_resource}
\alias{geosphere_explore_resource}
\title{Explore Geosphere Resource Metadata and Requirements}
\usage{
geosphere_explore_resource(
  resource_id,
  api_url = "https://dataset.api.hub.geosphere.at",
  version = "v1",
  user_agent = "davR",
  print_summary = TRUE,
  timeout_seconds = 2
)
}
\arguments{
\item{resource_id}{Character string. The specific dataset or resource ID. Required.}

\item{api_url}{Base URL for the Geosphere API. Defaults to Geosphere Hub v1.}

\item{version}{API version string. Defaults to "v1".}

\item{user_agent}{A string to identify the client. Defaults to "davR".}

\item{print_summary}{Logical. If \code{TRUE} (default), print a formatted summary
to the console for each combination found.}

\item{timeout_seconds}{Numeric. Timeout in seconds for HTTP requests. Defaults to 2.}
}
\value{
A named list where each element corresponds to a unique combination of
\code{type}, \code{mode}, and \code{response_formats} found for the \code{resource_id}. The name
of each element is a descriptive string like \code{"station_historical_csv"}.
Each element is itself a list containing:
\item{combination}{A list detailing the specific type, mode, and formats.}
\item{metadata}{The full raw metadata list fetched from the API's \verb{/metadata} endpoint (or NULL if failed).}
\item{available_parameters}{A data frame (tibble) of available parameters (if found in metadata).}
\item{time_coverage}{A list indicating start/end times (if found in metadata).}
\item{spatial_info}{A list with spatial details (CRS, bbox, etc.) (if found in metadata).}
\item{required_query_params}{A character vector listing the query parameters identified as required by probing the data endpoint (or NULL if determination failed).}
Returns \code{NULL} if the initial dataset lookup fails or the \code{resource_id} is not found.
}
\description{
Fetches metadata and determines required query parameters for a specific
Geosphere resource ID across all its available type, mode, and format
combinations. It presents available parameters, coverage details, and the
definitive required parameters needed to query the data endpoint via
\code{geosphere_get_data}.
}
\details{
This function first retrieves the list of all available datasets using
\code{geosphere_get_datasets}. It then filters for the specified \code{resource_id}.
For each unique combination of type, mode, and format found for that ID, it
retrieves descriptive metadata (available parameters, time range, etc.)
from the resource's \verb{/metadata} endpoint via direct HTTP calls.
Finally, for each combination, it makes a deliberate (parameter-less) request
to the main \emph{data} endpoint to provoke an error message. By parsing this error
message (typically JSON with a 'detail' field), it accurately identifies the
query parameters that the API requires for that specific data endpoint.
Requires \code{geosphere_get_datasets} function to be available.
}
\examples{
\dontrun{
# Requires geosphere_get_datasets to be available

# Explore a resource known to have multiple combinations
exploration_results = geosphere_explore_resource(
  resource_id = "apolis_short-v1-1d-100m"
)

# The function prints summaries by default.
# The returned object is a list named by combinations:
print(names(exploration_results))
# > [1] "grid_historical_geojson"      "grid_historical_netcdf" ...

# Inspect the details for one specific combination:
if ("grid_historical_geojson" \%in\% names(exploration_results)) {
   # Check the *required* parameters found by probing the data endpoint:
   print(exploration_results$grid_historical_geojson$required_query_params)
   # Should show: [1] "parameters" "start" "end" "bbox" (based on example error)

   # Compare with *available* parameters from metadata:
   print(utils::head(exploration_results$grid_historical_geojson$available_parameters))
}

# Explore a resource with likely only one combination
exploration_klima = geosphere_explore_resource(resource_id = "klima-v2-1h")
if (!is.null(exploration_klima)) {
   print(names(exploration_klima))
   # Likely "station_historical_csv" or similar
   print(exploration_klima[[1]]$required_query_params)
   # Should show something like "parameters", "start", "end", "station_ids"
}
}
}
