% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geosphere_explore_resource.R
\name{geosphere_explore_resource}
\alias{geosphere_explore_resource}
\title{Explore Geosphere Resource Metadata}
\usage{
geosphere_explore_resource(
  resource_id,
  type,
  mode,
  api_url = "https://dataset.api.hub.geosphere.at",
  version = "v1",
  user_agent = "davR",
  print_summary = TRUE
)
}
\arguments{
\item{resource_id}{Character string. The specific resource ID (e.g., "klima-v2-1h"). Required.}

\item{type}{Character string. The data type (e.g., "grid", "station"). Required. Found via
\code{geosphere_find_datasets}.}

\item{mode}{Character string. The data mode (e.g., "historical"). Required. Found via
\code{geosphere_find_datasets}.}

\item{api_url}{Base URL for the Geosphere API. Defaults to Geosphere Hub v1.}

\item{version}{API version string. Defaults to "v1".}

\item{user_agent}{Client user agent string. Defaults to "davR".}

\item{print_summary}{Logical. If \code{TRUE} (default), print a formatted summary
to the console.}
}
\value{
A list containing parsed metadata components:
\item{metadata}{The full metadata list fetched from the API.}
\item{available_parameters}{A data frame (tibble) of available parameters (if found).}
\item{time_coverage}{A list indicating start/end times (if found).}
\item{spatial_info}{A list with spatial details (if found).}
\item{likely_required_query_params}{A character vector suggesting required parameters.}
Returns \code{NULL} if metadata fetching fails.
}
\description{
Fetches and presents metadata for a specific Geosphere resource ID in a
user-friendly format, highlighting available parameters and likely requirements
for querying the data endpoint.
}
\examples{
\dontrun{
# Ensure required packages are installed
# install.packages(c("dplyr", "stringr", "tibble", "cli", "httr", "jsonlite"))

# 1. Find a dataset first
  station_datasets = tryCatch(
      geosphere_find_datasets(filter_type="station", filter_mode="historical"),
      error = function(e) { print(e$message); NULL }
  )

  # 2. Explore the chosen dataset (if found)
  if(!is.null(station_datasets) && nrow(station_datasets) > 0) {
    res_id = station_datasets$resource_id[1]
    res_type = station_datasets$type[1]
    res_mode = station_datasets$mode[1]

    explore_result = tryCatch(
        geosphere_explore_resource(
             resource_id = res_id,
             type = res_type,
             mode = res_mode),
        error = function(e) { print(e$message); NULL }
    )

    if (!is.null(explore_result)) {
       # A summary was printed (default). You can also inspect the list:
       print(str(explore_result, max.level = 1))
       print(explore_result$likely_required_query_params)
    }
  } else {
      print("Could not find suitable station datasets to explore.")
  }

# Explore a grid dataset directly
  explore_grid = tryCatch(
       geosphere_explore_resource(
          resource_id = "apolis_short-v1-1d-100m",
          type = "grid",
          mode = "historical"),
       error = function(e) { print(e$message); NULL }
   )
}
}
