% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geosphere_get_params_metadata.R
\name{geosphere_get_params_metadata}
\alias{geosphere_get_params_metadata}
\title{Get Parameter Metadata for a Geosphere Resource}
\usage{
geosphere_get_params_metadata(
  resource_id,
  type = "timeseries",
  mode = "historical",
  api_url = "https://dataset.api.hub.geosphere.at",
  version = "v1",
  user_agent = "davR"
)
}
\arguments{
\item{resource_id}{Character string. The specific dataset or resource ID
(e.g., "apolis_short-v1-1d-100m", "klima-v2-1h"). This is required.}

\item{type}{Character string. The data type (e.g., "grid", "station", "timeseries").
Defaults to "timeseries". Ensure this matches the \code{resource_id}.}

\item{mode}{Character string. The data mode (e.g., "historical", "current").
Defaults to "historical". Ensure this matches the \code{resource_id}.}

\item{api_url}{Base URL for the Geosphere API. Defaults to Geosphere Hub v1.}

\item{version}{API version string. Defaults to "v1".}

\item{user_agent}{A string to identify the client. Defaults to "davR".}
}
\value{
A list parsed from the JSON metadata response. The structure depends
on the specific resource's metadata. It often contains details about
\code{parameters}, \code{stations}, \code{timerange}, etc. Returns \code{NULL} if the request fails.
}
\description{
Retrieves the metadata for a specific Geosphere API resource. This metadata
typically contains information about available parameters, stations (if applicable),
time ranges, required query parameters for the data endpoint, etc.
}
\examples{
\dontrun{
# Example 1: Get metadata for a historical climate station dataset
try({
  klima_meta = geosphere_get_params_metadata(
    resource_id = "klima-v2-1h",
    type = "station",
    mode = "historical"
  )
  if (!is.null(klima_meta)) {
    print(names(klima_meta))
    # Look at available parameters
    if ("parameters" \%in\% names(klima_meta)) {
       print(head(klima_meta$parameters))
    }
  }
})

# Example 2: Get metadata for a grid dataset
try({
  grid_meta = geosphere_get_params_metadata(
    resource_id = "spartacus-v2-1d-1km", # Example ID, check availability
    type = "grid",
    mode = "historical"
  )
  if (!is.null(grid_meta)) {
    print(names(grid_meta))
  }
})

# Example 3: Non-existent resource (will likely cause an error)
# try(geosphere_get_params_metadata(resource_id = "non-existent-resource"))
}
}
