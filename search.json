[{"path":"https://robinkohrs.github.io/dav/articles/geosphere_api.html","id":"get-the-available-datasets","dir":"Articles","previous_headings":"","what":"Get the available datasets","title":"Geosphere API","text":"","code":"ds = geosphere_get_datasets() DT::datatable(ds)"},{"path":"https://robinkohrs.github.io/dav/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://robinkohrs.github.io/dav/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). davR: Package (One Line, Title Case). R package version 0.0.0.9000, https://robinkohrs.github.io/dav/.","code":"@Manual{,   title = {davR: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://robinkohrs.github.io/dav/}, }"},{"path":"https://robinkohrs.github.io/dav/reference/envir_get_sea_ice_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","title":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","text":"Fetches daily sea ice extent data National Snow Ice Data Center (NSIDC) REST API https://nsidc.org/arcticseaicenews/charctic-interactive-sea-ice-graph/. Allows specifying years, pole (North/Arctic South/Antarctic), optionally applying smoothing window. Also retrieves 1981-2010 quantile data (median, IQR, range) comparison, applying smoothing specified.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/envir_get_sea_ice_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","text":"","code":"envir_get_sea_ice_extent(years = NULL, pole = \"north\", window = 5)"},{"path":"https://robinkohrs.github.io/dav/reference/envir_get_sea_ice_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","text":"years numeric vector years retrieve daily data. pole Character string: \"north\" (default) Arctic \"south\" Antarctic. window Numeric: size moving average smoothing window (days). Defaults 5. Set window = 1 retrieve raw, unsmoothed data. Must positive integer.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/envir_get_sea_ice_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","text":"tidy data frame following columns: date: date (Date objects). yearly data, actual date. quantile data, day--year mapped onto base year 2000 (leap year) consistent plotting. ice_extent_mi_sqkm: Sea ice extent millions square kilometers. variable: Character string indicating data type: year (e.g., \"2023\") specific year data. quantile label (e.g., \"q50_1981_to_2010\", \"q25_1981_to_2010\") aggregate data. pole: Character string, either \"north\" \"south\". smoothing_window: Numeric, window size used (1 indicates raw data).","code":""},{"path":"https://robinkohrs.github.io/dav/reference/envir_get_sea_ice_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Arctic/Antarctic Sea Ice Extent Data — envir_get_sea_ice_extent","text":"","code":"if (FALSE) { # \\dontrun{ # Get Arctic data for 2022 and 2023 with default 5-day smoothing ice_data_arctic_smooth = fetch_sea_ice_extent(years = c(2022, 2023)) print(head(ice_data_arctic_smooth))  # Get Arctic data for 2022 and 2023 with NO smoothing (raw data) ice_data_arctic_raw = fetch_sea_ice_extent(years = c(2022, 2023), window = 1) print(head(ice_data_arctic_raw))  # Example of plotting (requires ggplot2, dplyr, lubridate) if (requireNamespace(\"ggplot2\", quietly = TRUE) &&     requireNamespace(\"dplyr\", quietly = TRUE) &&     requireNamespace(\"lubridate\", quietly = TRUE)) {    library(ggplot2)   library(dplyr)   library(lubridate)    # Plot 2023 Arctic raw data against historical raw range/median   fetch_sea_ice_extent(years = 2023, pole = \"north\", window = 1) %>%     filter(variable %in% c(\"2023\", \"q0_1981_to_2010\", \"q100_1981_to_2010\", \"q50_1981_to_2010\")) %>%     # Add a temporary DOY column for plotting alignment     mutate(doy = yday(date)) %>%     ggplot(aes(x = doy, y = ice_extent_mi_sqkm, color = variable)) +     geom_line(linewidth = 1) +     labs(title = \"Arctic Sea Ice Extent (2023 Raw vs 1981-2010 Raw)\",          x = \"Day of Year\",          y = \"Ice Extent (Million sq km)\",          color = \"Data Series\") +     theme_minimal() } } # }"},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"function runs gdalUtilities::gdalinfo(file, json = TRUE) get structured information raster file, specifically extracting details subdatasets (common formats like NetCDF HDF). parses subdataset name description fields create summary table.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"","code":"gdal_info_table(file, interactive = FALSE, ...)"},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"file Character string. Path raster file (e.g., NetCDF, HDF). interactive Logical. TRUE session interactive, prompts user select subdatasets via graphical list (available) text menu. Default: FALSE. ... Additional arguments passed verbatim gdalUtilities::gdalinfo(). Note json = TRUE automatically added.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"list two elements: table data frame containing information subdataset found, columns typically including index, name (full GDAL name), variable (derived variable name), description, dimensions, data_type. Returns empty data frame columns subdatasets found. selected character vector containing variable names subdatasets selected user. Empty interactive = FALSE selection made.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"Uses gdalUtilities::gdalinfo JSON output extract subdataset #' information tidy data frame. Optionally allows interactive selection.  #'","code":""},{"path":"https://robinkohrs.github.io/dav/reference/gdal_info_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Select Subdataset Information from a Raster File — gdal_info_table","text":"","code":"if (FALSE) { # \\dontrun{ # Create a dummy NetCDF file for demonstration if needed # (Requires the ncdf4 package) if (requireNamespace(\"ncdf4\", quietly = TRUE)) {   tmp_nc_file = tempfile(fileext = \".nc\")   dimX = ncdf4::ncdim_def(\"x\", \"meters\", 1:10)   dimY = ncdf4::ncdim_def(\"y\", \"meters\", 1:5)   var1 = ncdf4::ncvar_def(\"temp\", \"degrees_C\", list(dimX, dimY), -999,                           \"Temperature variable\")   var2 = ncdf4::ncvar_def(\"precip\", \"mm\", list(dimX, dimY), -999,                           \"Precipitation variable\")   nc_out = ncdf4::nc_create(tmp_nc_file, list(var1, var2))   ncdf4::nc_close(nc_out)    # --- Example Usage ---    # 1. Extract subdataset table (non-interactive)   info_list = gdal_info_table(tmp_nc_file)   print(info_list$table)    # 2. Extract and potentially select interactively   # (Will only prompt if run in an interactive R session)   selected_info = gdal_info_table(tmp_nc_file, interactive = TRUE)   if (length(selected_info$selected) > 0) {     cat(\"\\nSelected variables:\\n\")     print(selected_info$selected)   } else if (interactive()) {     cat(\"\\nNo variables selected interactively.\\n\")   }    # Clean up dummy file   unlink(tmp_nc_file) } else {   message(\"Skipping examples: ncdf4 package not available to create test file.\") }  # Example with a potentially non-existent file (will error) try(gdal_info_table(\"non_existent_file.nc\")) } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"Fetches metadata determines required query parameters specific Geosphere resource ID across available type, mode, format combinations. presents available parameters, coverage details, definitive required parameters needed query data endpoint via geosphere_get_data.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"","code":"geosphere_explore_resource(   resource_id,   api_url = \"https://dataset.api.hub.geosphere.at\",   version = \"v1\",   user_agent = \"davR\",   print_summary = TRUE )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"resource_id Character string. specific dataset resource ID. Required. api_url Base URL Geosphere API. Defaults Geosphere Hub v1. version API version string. Defaults \"v1\". user_agent string identify client. Defaults \"davR\". print_summary Logical. TRUE (default), print formatted summary console combination found.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"named list element corresponds unique combination type, mode, response_formats found resource_id. name element descriptive string like \"station_historical_csv\". element list containing: combination list detailing specific type, mode, formats. metadata full raw metadata list fetched API's /metadata endpoint (NULL failed). available_parameters data frame (tibble) available parameters (found metadata). time_coverage list indicating start/end times (found metadata). spatial_info list spatial details (CRS, bbox, etc.) (found metadata). required_query_params character vector listing query parameters identified required probing data endpoint (NULL determination failed). Returns NULL initial dataset lookup fails resource_id found.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"function first retrieves descriptive metadata (available parameters, time range, etc.) resource's /metadata endpoint. , combination, makes deliberate (parameter-less) request main data endpoint provoke error message. parsing error message (typically JSON 'detail' field), accurately identifies query parameters API requires specific data endpoint.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_explore_resource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore Geosphere Resource Metadata and Requirements — geosphere_explore_resource","text":"","code":"if (FALSE) { # \\dontrun{ # Assume geosphere_find_datasets is available  # Explore a resource known to have multiple combinations exploration_results = geosphere_explore_resource(    resource_id = \"apolis_short-v1-1d-100m\" )  # The function prints summaries by default. # The returned object is a list named by combinations: print(names(exploration_results)) # > [1] \"grid_historical_geojson\"     \"grid_historical_netcdf\" ...  # Inspect the details for one specific combination: if (\"grid_historical_geojson\" %in% names(exploration_results)) {    # Check the *required* parameters found by probing the data endpoint:    print(exploration_results$grid_historical_geojson$required_query_params)    # Should show: [1] \"parameters\" \"start\" \"end\" \"bbox\" (based on the example error)     # Compare with *available* parameters from metadata:    print(utils::head(exploration_results$grid_historical_geojson$available_parameters)) }  # Explore a resource with likely only one combination exploration_klima = geosphere_explore_resource(resource_id = \"klima-v2-1h\") if (!is.null(exploration_klima)) {    print(names(exploration_klima))    # Likely \"station_historical_csv\" or similar    print(exploration_klima[[1]]$required_query_params)    # Should show something like \"parameters\", \"start\", \"end\", \"station_ids\" } } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","title":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","text":"Constructs URL fetches data Geosphere API's main resource endpoint based provided parameters. function allows fetching data file path (default), directly R object (data frame), raw HTTP response. Note: function retrieves data primary resource path (e.g., /v1/timeseries/historical/{resource_id}). retrieve metadata (usually found /metadata appended resource path), need construct URL manually use tool like httr::GET. See Geosphere API documentation details available endpoints parameters: Getting Started Resources Datasets Overview Example endpoint: SPARTACUS Monthly Example metadata URL: SPARTACUS Monthly Metadata","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","text":"","code":"geosphere_get_data(   resource_id,   parameters = NULL,   start = NULL,   end = NULL,   station_ids = NULL,   output_format = \"csv\",   ...,   api_url = \"https://dataset.api.hub.geosphere.at\",   version = \"v1\",   type = \"timeseries\",   mode = \"historical\",   return_format = c(\"file\", \"dataframe\", \"raw\"),   output_file = NULL,   verbose = FALSE,   timeout_seconds = 120 )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","text":"resource_id Required. specific dataset resource ID (e.g., \"klima-v2-1m\"). NULL empty. parameters Character vector comma-separated string parameter IDs retrieve (e.g., c(\"tl\", \"tx\"), \"tl,tx\"). Check API metadata available parameters. start Start date/time string (ISO 8601 format preferred, e.g., \"YYYY-MM-DD\" \"YYYY-MM-DDTHH:MM:SS\"). end End date/time string (ISO 8601 format preferred). station_ids Character vector comma-separated string station IDs (e.g., c(\"5925\", \"11035\"), \"5925,11035\"). Check API metadata available stations. output_format desired data format API (e.g., \"csv\", \"json\", \"geojson\"). Defaults \"csv\". Passed query parameter. ... Additional query parameters specific API endpoint. Values automatically URL-encoded. Use less common parameters covered explicit arguments. api_url Base URL Geosphere API. version API version string. type Data type (e.g., \"timeseries\", \"station\", \"grid\"). mode Data mode (e.g., \"historical\", \"current\", \"forecast\"). return_format Character string specifying desired return type R function: \"file\": (Default) Downloads data temporary file (output_file specified) returns file path. \"dataframe\": Attempts parse response content (CSV JSON) directly data frame list. Requires readr /jsonlite packages. \"raw\": Returns raw httr response object. output_file Path downloaded data saved return_format = \"file\". NULL (default), temporary file used. verbose Logical. TRUE, prints constructed URL shows download progress. timeout_seconds Request timeout seconds. Passed httr::GET.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","text":"Depends return_format: \"file\": path downloaded file. \"dataframe\": data frame (CSV) list/data frame (JSON), parsed response. Requires readr jsonlite. \"raw\": raw httr response object.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from Geosphere Austria's Open Data Hub — geosphere_get_data","text":"","code":"if (FALSE) { # \\dontrun{ # Ensure necessary packages are installed for 'dataframe' return format # install.packages(c(\"readr\", \"jsonlite\"))  # Example 1: Get monthly climate data for a station, save to temp file (default) temp_csv_path = geosphere_get_data(     resource_id = \"klima-v2-1m\",     parameters = \"tl_mittel\",     start = \"2023-01-01\",     end = \"2023-12-31\",     station_ids = \"5925\",     output_format = \"csv\", # API format is CSV     type = \"station\"     # return_format defaults to \"file\" ) print(temp_csv_path) # data = readr::read_csv(temp_csv_path) # Optionally read the data  # Example 2: Get hourly data and return directly as a data frame start_time = \"2024-04-06T05:00:00\" end_time = \"2024-04-06T17:00:00\" try({ # Wrap in try in case readr is not installed or parsing fails hourly_data = geosphere_get_data(     resource_id = \"klima-v2-1h\",     parameters = \"tl\",     start = start_time,     end = end_time,     station_ids = 5925, # Numeric ID works too, converted to character     output_format = \"csv\", # API format     type = \"station\",     return_format = \"dataframe\", # Request data frame directly     verbose = TRUE ) print(head(hourly_data)) }, silent = TRUE)  # Example 3: Using ... for a less common parameter (e.g., spatial filter) # Hypothetical example - check API docs for actual parameters grid_data_path = geosphere_get_data(     resource_id = \"spartacus-v2-1d-1km\",     parameters = \"t_2m\",     start = \"2023-05-01\",     end = \"2023-05-01\",     bbox = \"10,47,11,48\", # Passed via ...     type = \"grid\",     output_format = \"netcdf\" # Assuming API supports this ) print(grid_data_path)  # Example 4: Demonstrating the resource_id check (will cause an error) # try(geosphere_get_data()) # try(geosphere_get_data(resource_id = NULL)) # try(geosphere_get_data(resource_id = \"   \"))  # --- How to get METADATA manually --- # You need to construct the specific metadata URL and use httr directly metadata_url <- \"https://dataset.api.hub.geosphere.at/v1/station/historical/klima-v2-1h/metadata\" response <- httr::GET(metadata_url) httr::stop_for_status(response) # Check for errors if (requireNamespace(\"jsonlite\", quietly = TRUE)) {   metadata_list <- jsonlite::fromJSON(httr::content(response, as = \"text\", encoding = \"UTF-8\"))   print(names(metadata_list))   print(head(metadata_list$parameters)) } else {    print(\"Install jsonlite to parse the metadata JSON\") } # --- } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Available Geosphere Datasets — geosphere_get_datasets","title":"Find Available Geosphere Datasets — geosphere_get_datasets","text":"Retrieves optionally filters list available datasets Geosphere API Hub based keywords, type, mode.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Available Geosphere Datasets — geosphere_get_datasets","text":"","code":"geosphere_get_datasets(   url = \"https://dataset.api.hub.geosphere.at/v1/datasets\",   user_agent = \"davR\",   filter_keywords = NULL,   filter_type = NULL,   filter_mode = NULL,   add_resource_id = TRUE )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Available Geosphere Datasets — geosphere_get_datasets","text":"url URL datasets endpoint. Defaults current v1 endpoint. user_agent Client user agent string. Defaults \"davR\". filter_keywords Character string vector. Keep datasets whose title description (available) contain keywords (case-insensitive). filter_type Character string vector. Keep datasets matching types (e.g., \"grid\", \"station\"). filter_mode Character string vector. Keep datasets matching modes (e.g., \"historical\", \"forecast\"). add_resource_id Logical. TRUE (default), attempt parse resource_id dataset url add separate column.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Available Geosphere Datasets — geosphere_get_datasets","text":"data frame listing available (potentially filtered) datasets. Includes metadata_url potentially resource_id columns.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Available Geosphere Datasets — geosphere_get_datasets","text":"","code":"if (FALSE) { # \\dontrun{   # Get all datasets   all_ds = geosphere_find_datasets()   print(head(all_ds))    # Find historical grid datasets related to temperature or radiation   grid_rad_ds = geosphere_find_datasets(     filter_keywords = c(\"temperature\", \"radiation\", \"solar\"),     filter_type = \"grid\",     filter_mode = \"historical\"   )   # Display key columns for the filtered results   if (nrow(grid_rad_ds) > 0) {      print(grid_rad_ds[, intersect(c(\"resource_id\", \"type\", \"mode\", \"title\", \"url\"),                                    names(grid_rad_ds))])   } else {      print(\"No matching datasets found.\")   } } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Weather Forecast — geosphere_get_prediction","title":"Weather Forecast — geosphere_get_prediction","text":"Get weather predictions Austria/Alps","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Forecast — geosphere_get_prediction","text":"","code":"geosphere_get_prediction(   host,   x,   y,   level = NULL,   subdatasets = NULL,   download_dir = \"data_raw\",   timezone = \"Europe/Paris\" )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Forecast — geosphere_get_prediction","text":"host Character. data source query. Must one : \"nwp\" Numerical Weather Prediction (NWP) model outputs. high-resolution forecasts extended Alpine region 2.5 km grid, updated every 3 hours forecast horizon 60 hours. information, visit https://data.hub.geosphere./dataset/nwp-v1-1h-2500m. \"nowcast\" Short-term forecasts using real-time observations radar data, useful rapid updates. information, visit https://data.hub.geosphere./dataset/nowcast-v1-15min-1km. \"ensemble\" C-LAEF (Convection-permitting Limited-Area Ensemble Forecasting) system provides weather forecasts extended Alpine region 2.5 km grid. updated twice daily forecast horizon 60 hours. dataset includes 10th, 50th, 90th percentiles 17 model runs (16 ensemble members + 1 control run), allowing uncertainty estimation forecasts. information, visit https://data.hub.geosphere./dataset/ensemble-v1-1h-2500m. x coordinates point get prediction y coordinates point get prediction level level prediction get subdatasets subdatasets get download_dir directory download data timezone timezone prediction","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weather Forecast — geosphere_get_prediction","text":"data.frame prediction","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_resource_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","title":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","text":"Retrieves metadata specific Geosphere API resource. type /mode provided, function attempts look using geosphere_find_datasets. considers response_formats checking unique combinations can handle ambiguity either stopping prompting user interactively.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_resource_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","text":"","code":"geosphere_get_resource_metadata(   resource_id,   type = NULL,   mode = NULL,   interactive = FALSE,   api_url = \"https://dataset.api.hub.geosphere.at\",   version = \"v1\",   user_agent = \"davR\" )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_resource_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","text":"resource_id Character string. specific dataset resource ID (e.g., \"apolis_short-v1-1d-100m\", \"klima-v2-1h\"). required. type Character string NULL. data type (e.g., \"grid\", \"station\"). NULL (default), function try look . mode Character string NULL. data mode (e.g., \"historical\"). NULL (default), function try look . interactive Logical. TRUE multiple type/mode/format combinations found resource_id, prompt user select one via menu. Defaults FALSE (stops error case ambiguity). api_url Base URL Geosphere API. Defaults Geosphere Hub v1. version API version string. Defaults \"v1\". user_agent string identify client. Defaults \"davR\".","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_resource_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","text":"list parsed JSON metadata response selected specified type/mode combination. list also includes $determined_type $determined_mode indicating combination used. Returns NULL request fails, resource ID found, user cancels interactive selection.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_resource_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Metadata for a Geosphere Resource (with auto-lookup) — geosphere_get_resource_metadata","text":"","code":"if (FALSE) { # \\dontrun{ # Assume geosphere_find_datasets is available in the package or environment  # Example 1: Interactive lookup for a resource with multiple formats try({   meta_interactive = geosphere_get_resource_metadata(      resource_id = \"apolis_short-v1-1d-100m\",      interactive = TRUE   )   # You might be prompted to choose between grid/geojson, grid/netcdf, etc.   if (!is.null(meta_interactive)) {      print(paste(\"Metadata fetched for type:\", meta_interactive$determined_type,                  \"mode:\", meta_interactive$determined_mode))      print(names(meta_interactive))   } })  # Example 2: Explicitly provide type and mode (lookup is skipped) try({   meta_explicit = geosphere_get_resource_metadata(      resource_id = \"klima-v2-1h\",      type = \"station\",      mode = \"historical\"   )   if (!is.null(meta_explicit)) {      print(utils::head(meta_explicit$parameters)) # Use utils::head explicitly   } })  # Example 3: Provide only resource_id, non-interactive (will likely error if ambiguous) # try(geosphere_get_resource_metadata(resource_id = \"apolis_short-v1-1d-100m\"))  } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Geosphere Austria Station Metadata — geosphere_get_stations","title":"Download Geosphere Austria Station Metadata — geosphere_get_stations","text":"Retrieves station metadata Geosphere Austria API, typically dataset's metadata endpoint. Optionally caches result local file.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Geosphere Austria Station Metadata — geosphere_get_stations","text":"","code":"geosphere_get_stations(   metadata_url =     \"https://dataset.api.hub.geosphere.at/v1/station/historical/klima-v2-1d/metadata\",   output_path = NULL,   return_format = c(\"sf\", \"dataframe\"),   cache_format = c(\"rds\", \"csv\"),   crs = 4326,   verbose = FALSE )"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Geosphere Austria Station Metadata — geosphere_get_stations","text":"metadata_url full URL metadata endpoint specific Geosphere API dataset contains station information (e.g., \".../metadata\"). Defaults metadata URL \"klima-v2-1d\" dataset. output_path Optional. file path (e.g., \"stations.rds\" \"stations.csv\") downloaded processed station data (sf object data frame) saved caching. file exists, loaded cache instead downloading. Using \".rds\" recommended saving sf object perfectly. return_format Character. Either \"sf\" (default) return sf spatial data frame \"dataframe\" return regular data frame. cache_format Character. Format use caching output_path provided. Either \"rds\" (default, recommended sf objects) \"csv\". Ignored output_path NULL. Note saving sf objects CSV loses spatial information unless WKT geometry explicitly handled. crs Coordinate reference system output sf object. Defaults 4326 (WGS 84), assuming API provides standard longitude/latitude. verbose Logical. TRUE, print informative messages.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Geosphere Austria Station Metadata — geosphere_get_stations","text":"sf spatial data frame (return_format = \"sf\") regular data frame (return_format = \"dataframe\") containing station metadata. Returns NULL downloading processing fails cache exists.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_get_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Geosphere Austria Station Metadata — geosphere_get_stations","text":"","code":"if (FALSE) { # \\dontrun{ # Ensure sf is installed: install.packages(\"sf\")  # Example 1: Get stations as an sf object (default) stations_sf <- geosphere_get_stations(verbose = TRUE) if (!is.null(stations_sf)) {   print(head(stations_sf))   plot(st_geometry(stations_sf)) }  # Example 2: Get stations as a data frame and cache to RDS stations_df <- geosphere_get_stations(   return_format = \"dataframe\",   output_path = \"geosphere_stations_cache.rds\",   cache_format = \"rds\",   verbose = TRUE ) # Next time, it will load from \"geosphere_stations_cache.rds\" if it exists stations_cached <- geosphere_get_stations(output_path = \"geosphere_stations_cache.rds\")  # Example 3: Use a different metadata URL (replace with a valid one) # custom_url <- \"https://dataset.api.hub.geosphere.at/v1/...\" # custom_stations <- geosphere_get_stations(metadata_url = custom_url)  } # }"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_list_params.html","id":null,"dir":"Reference","previous_headings":"","what":"List Parameters for a Given Resource — geosphere_list_params","title":"List Parameters for a Given Resource — geosphere_list_params","text":"function lists parameters available given resource.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_list_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Parameters for a Given Resource — geosphere_list_params","text":"","code":"geosphere_list_params(resource_id)"},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_list_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Parameters for a Given Resource — geosphere_list_params","text":"resource_id ID resource list parameters .","code":""},{"path":"https://robinkohrs.github.io/dav/reference/geosphere_list_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Parameters for a Given Resource — geosphere_list_params","text":"vector parameter names.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://robinkohrs.github.io/dav/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure Directory Structure for a Path Exists — sys_make_path","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"Checks directory containing specified path exists, creates recursively . Provides console feedback using cli package.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"","code":"sys_make_path(path, showWarnings = FALSE, mode = \"0777\")"},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"path character string specifying full path (intended file directory). function ensure parent directory path exists. showWarnings Logical. low-level warnings dir.create() (e.g., directory already exists different permissions) shown? Defaults FALSE. Note informational messages function controlled separately (always show). mode mode create directory , passed dir.create(). Defaults \"0777\" (read/write/execute ). See ?dir.create.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"original input path, returned invisibly. useful piping, e.g., write.csv(my_data, makePath(\"/path//file.csv\")).","code":""},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"file path like \"/path///file.txt\", function ensures directory \"/path///\" exists. directory path like \"/path///newdir/\" \"/path///newdir\", ensures \"/path///\" exists. create final component (file.txt newdir) , parent structure. Console messages indicate actions taken.","code":""},{"path":"https://robinkohrs.github.io/dav/reference/sys_make_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure Directory Structure for a Path Exists — sys_make_path","text":"","code":"if (FALSE) { # \\dontrun{ # --- Example 1: Path to a potential file --- temp_file_path = file.path(tempdir(), \"makePath_demo\", \"subdir\", \"my_data.csv\") cat(\"Demonstrating makePath for:\", temp_file_path, \"\\n\") makePath(temp_file_path) # Should create makePath_demo/subdir/ makePath(temp_file_path) # Should report directory already exists  # --- Example 2: Path to a directory --- temp_dir_path = file.path(tempdir(), \"makePath_demo\", \"another_dir\") cat(\"\\nDemonstrating makePath for:\", temp_dir_path, \"\\n\") makePath(temp_dir_path) # Should NOT create 'another_dir', but ensure 'makePath_demo' exists  # --- Example 3: Path in current directory --- cat(\"\\nDemonstrating makePath for:\", \"local_file.txt\", \"\\n\") makePath(\"local_file.txt\") # Should give warning about not creating \".\"  # --- Example 4: Root directory --- cat(\"\\nDemonstrating makePath for:\", \"/\", \"\\n\") makePath(\"/\") # Should give warning about not creating \"/\"  # --- Clean up example directories --- unlink(file.path(tempdir(), \"makePath_demo\"), recursive = TRUE) } # }"}]
